Redux Middleware and Thunk: A Simplified Overview

When working with Redux, you often need to handle asynchronous operations (like fetching data from an API) while keeping your state management predictable and clean. 
This is where Redux Middleware and Redux Thunk come in.

1. What is Redux Middleware?
- Middleware in Redux is a function that sits between dispatching an action and the moment it reaches the reducer. It allows you to modify, delay, or log actions before they hit the reducer.

Why Do We Need Middleware?

Redux itself only allows synchronous updates to the state. However, real-world applications often require asynchronous operations like:

- Fetching data from an API
- Delaying an action
- Logging actions
- Handling authentication
- Middleware helps us extend Redux functionality to handle such cases.

2. Redux Thunk: The Most Common Middleware

What is Redux Thunk?
- Thunk is a middleware that allows you to write action creators that return a function instead of an action. This function can delay the actionâ€™s dispatch or dispatch 
  multiple actions asynchronously.

Why Use Redux Thunk?
- Handles asynchronous logic: Allows you to make API calls inside Redux actions.
- Dispatch multiple actions: Useful for handling loading states (e.g., FETCH_START, FETCH_SUCCESS, FETCH_FAILURE).
- Access Redux state: The function inside a thunk receives dispatch and getState as arguments.

3. How Redux Middleware Works

Middleware Flow:

- Dispatch an action
- Middleware intercepts it before reaching the reducer.
- Middleware modifies, delays, or performs side effects (like API calls).
- Middleware dispatches a new action.
- Reducer updates the state.

This ensures Redux stays pure and predictable while allowing side effects.

4. Implementing Redux Thunk

Step 1: Install Redux Thunk

If not already installed, you can install it using:

npm install redux-thunk

Step 2: Set Up Middleware in Redux Store

Modify your store.js to use thunk:

import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import rootReducer from "./reducers";

const store = createStore(rootReducer, applyMiddleware(thunk));

export default store;

5. Writing Async Actions with Redux Thunk

Without Thunk, an action typically looks like:

const fetchUsers = () => {
    return {
        type: "FETCH_USERS",
    };
};

This is synchronous.

With Thunk, we can handle asynchronous API calls:

const fetchUsers = () => {
    return async (dispatch) => {
        dispatch({ type: "FETCH_USERS_REQUEST" });

        try {
            const response = await fetch("https://jsonplaceholder.typicode.com/users");
            const data = await response.json();

            dispatch({ type: "FETCH_USERS_SUCCESS", payload: data });
        } catch (error) {
            dispatch({ type: "FETCH_USERS_FAILURE", payload: error.message });
        }
    };
};

6. Handling the Reducer

Reducers update the state based on actions:

const initialState = {
    loading: false,
    users: [],
    error: "",
};

const userReducer = (state = initialState, action) => {
    switch (action.type) {
        case "FETCH_USERS_REQUEST":
            return { ...state, loading: true };

        case "FETCH_USERS_SUCCESS":
            return { ...state, loading: false, users: action.payload };

        case "FETCH_USERS_FAILURE":
            return { ...state, loading: false, error: action.payload };

        default:
            return state;
    }
};

export default userReducer;

7. Dispatching the Thunk Action in a Component

Once Redux is set up, use useDispatch() to call the thunk action:

import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchUsers } from "./actions";

const UserList = () => {
    const dispatch = useDispatch();
    const { users, loading, error } = useSelector((state) => state);

    useEffect(() => {
        dispatch(fetchUsers());
    }, [dispatch]);

    if (loading) return <p>Loading...</p>;
    if (error) return <p>Error: {error}</p>;

    return (
        <ul>
            {users.map((user) => (
                <li key={user.id}>{user.name}</li>
            ))}
        </ul>
    );
};

export default UserList;

8. Summary:
- Redux Middleware allows actions to perform side effects before reaching the reducer.
- Redux Thunk is a middleware that lets you dispatch functions instead of plain objects.
- Thunk enables async actions like API calls inside Redux.
- You set up middleware in the store using applyMiddleware(thunk).
- Thunk actions return a function that dispatches actions at different stages (loading, success, failure).
- Reducers handle dispatched actions to update the store.
- React components use useDispatch() to call thunk actions and update UI accordingly.
